---
title: "class06"
author: "Kalodiah Toma (PID: A07606689)"
format: pdf
---

## All about functions in R

Every function in R has at least three things
-name (you pick it)
-arguments (the input(s) to your funtion)
-body

Today we will write a function to grade a class of student assignment scores (e.g. homeworks, etc).

First I will work with a simplified vector input where I know what the answer should be. 

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)  
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)  
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)  
```

```{r}
mean (student1)
```
How can we drop the lowest score? 
Use 'min()'
```{r}
min(student1)
which.min(student1)
```
```{r}
student1[-8]
```
Let's put the use of 'which.min(), and mean() to find the mean for student1 if we remove the lowest score assigment. 
```{r}
mean(student1[-8])
```
```{r}
mean(student1[-which.min(student1)])
```
Will this work for student2? 
No, because of NA
```{r}
mean(student2[-which.min(student2)])
```
```{r}
z<-student1
mean(z[-which.min(z)])
```
```{r}
x<-student2
mean(x[-which.min(x)])
```

```{r}
y<-student3
mean(y[-which.min(y)])
```
```{r}
mean(x)
```
```{r}
student2
mean(x, na.rm=TRUE)
```
```{r}
mean(y, na.rm=TRUE)
```
We can "mask" the NA or change them to zero. The rational here is if you don't do a hw you get zero pts.
```{r}
is.na(student2)

x[is.na(x)]<-0
```
We could use the `is.na()` function to find where the missing hw are in the input vector.

I think we are there. Let's put these pieces together to solve this. 

```{r}
x<-student2
#mask NA to zero
x[is.na(x)]<-0
#find themean dropping the lowest score
mean(x[-which.min(x)])
```

```{r}
y<-student3
#mask NA to zero
y[is.na(y)]<-0
#find themean dropping the lowest score
mean(y[-which.min(y)])
```
Turn this sinppet into a function. 
```{r}
grade <- function(x) {
  #this is where the body code lives
}
```
```{r}
x<-student2
#mask NA to zero
x[is.na(x)]<-0
#find themean dropping the lowest score
mean(x[-which.min(x)])

grade <- function(x) {
  #this is where the body code lives
}
```

```{r}
grade <- function(x) {
  x[is.na(x)]<-0 
  mean(x[-which.min(x)])
}
  
```


Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names=1)
gradebook
```

I need to read the gradebook CSV file
```{r}
gradebook <-read.csv("https://tinyurl.com/gradeinput", row.names = 1)
```
A very useful function that Barry is forcing use here is the `apply()` function. How do we use it to take our new `grade()` function? 
```{r}
ans<-apply(gradebook,1,grade)
ans
```

Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(ans)
```

Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

We are going to use the `apply()` function again here...
```{r}
which.min( apply(gradebook, 2, mean, na.rm=TRUE))
```
Let's mask the NA values to zero. 

```{r}
mask <- gradebook
mask[is.na(mask)]<-0
mask
```
```{r}
which.min(apply(mask, 2, mean))
```
```{r}
which.min(apply(mask, 2, sum))
```

Q4. From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

Now take the `apply()` function and the `cor()` fucntion and run over our whole gradebook.
```{r}
cor(mask$hw2, ans)
```
```{r}
cor(mask$hw5, ans)
```
```{r}
apply (mask, 2, cor, y=ans)
```
hw5 is most predictive of overall score


