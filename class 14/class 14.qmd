---
title: "class 14"
author: "Kalodiah Toma (A07606689)"
format: pdf
toc: true
---

# Data Import
# Data Tidying 
# DESeq setup and analysis
# Add annotation data 
# Save my results
# Visualization

```{r}
library(BiocManager)
library(DESeq2)
```

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)

counts<-read.csv("GSE37704_featurecounts.csv", row.names=1)
metadata<-read.csv("GSE37704_metadata.csv")
head(counts)
metadata
```
```{r}
# Import countdata
countData = read.csv(countFile, row.names=1)
head(countData)
```
Q. Complete the code below to remove the troublesome first column from countData

```{r}
counts<-countData[,-1]
all(colnames(counts) == metadata$id)
```

Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

Tip: What will rowSums() of countData return and how could you use it in this context?
```{r}
nrow(countData)
to.rm.ind<-rowSums(counts) == 0
counts<-counts[!to.rm.ind,]
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                             colData = metadata,
                             design = ~condition)
dds
summary(dds)
dds<-DESeq(dds)
res<-results(dds)
head(res)
```
```{r}
pc <- prcomp(t(counts), scale=T)
summary(pc)
plot(pc$x[,1], pc$x[,2], col=as.factor(metadata$condition), pch=15)
```
```{r}
plot(res$log2FoldChange,-log(res$padj))
```
Q. Improve this plot by completing the below code, which adds color and axis labels
```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```
Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.


```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(counts), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(counts),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

head(res, 10)
```

Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
#|message: false
library(gage)
library(gageData)
library(pathview)
```


```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
```{r}
# Get the results
data(kegg.sets.hs)
data(sigmet.idx.hs)
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

Have a look at my figure (@fig-cellcycle)

![Cell Cylce hsa04110](hsa04110.pathview.png){#fig-cellcycle}



```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```


```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

# Gene Ontology

```{r}
data(go.sets.hs)
data(go.subs.hs)
# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

```

```{r}
head(gobpres$less)
```


## Reactome
We will use the online version of Reactome. It wants a list of your genese. We will write it out from R here. 

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
write.table(sig_genes, 
            file="significant_genes.txt", 
            row.names=FALSE, col.names=FALSE, quote=FALSE)
print(paste("Total number of significant genes:", length(sig_genes)))
```
![](Homo Sapiens.png)

![](R-HSA-69306.png)



